package guay.philippe.capstone;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.os.AsyncTask;
import android.util.Log;

private StringBuilder inputStreamToString(InputStream is) {
    String line = "";
    StringBuilder total = new StringBuilder();
    // Wrap a BufferedReader around the InputStream
    BufferedReader rd = new BufferedReader(new InputStreamReader(is));
    // Read response until the end
    try {
     while ((line = rd.readLine()) != null) { 
       total.append(line); 
     }
    } catch (IOException e) {
     e.printStackTrace();
    }
    // Return full string
    return total;
}

private class AuthenticateTask extends AsyncTask<String, Integer, Boolean> {
	 // Create a new HttpClient and Post Header
	public IApiAccessResponse delegate=null;
   HttpClient mHttpclient = new DefaultHttpClient();
   HttpPost mHttppost = new HttpPost("http://localhost:8080/login");
	
    protected Boolean doInBackground(String... params) {
   		 
		 List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
		 nameValuePairs.add(new BasicNameValuePair("username", params[0]));
        nameValuePairs.add(new BasicNameValuePair("password", params[1]));

		 try {
			mHttppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    	 
		 Log.w("MUTIBO", "Execute HTTP Post Request");
        HttpResponse response = null;
		try {
			response = mHttpclient.execute(mHttppost);
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         
       String str = null;
		try {
			str = inputStreamToString(response.getEntity().getContent()).toString();
		} catch (IllegalStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
       Log.w("MUTIBO", str);
       return mRes = str.toString().equalsIgnoreCase("true");
        
    }

    protected void onProgressUpdate(Integer... progress) {
        setProgress(progress[0]);
    }

    protected void onPostExecute(boolean result) {
   	 if(delegate!=null)
        {
            delegate.postResult(result);
        }
        else
        {
            Log.e("ApiAccess", "You have not assigned IApiAccessResponse delegate");
        }
    }
}