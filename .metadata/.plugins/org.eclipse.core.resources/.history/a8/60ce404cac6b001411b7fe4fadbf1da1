package guay.philippe.capstone;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

public class CreateQuizActivity extends Activity {

	private WeakReference<PostCreatedQuizTask> asyncTaskWeakRef;
	private int TIMEOUT_MILLISEC = 10000; 
	private TextView mTitle;
	private String title;
	
	private TextView mSeekBarValue;
	
	private TextView mExplanation;
	private String explanation;
	
	private TextView mMovie1;
	private String movie1;
	
	private TextView mMovie2;
	private String movie2;
	
	private TextView mMovie3;
	private String movie3;
	
	private TextView mMovie4;
	private String movie4;
	
	private SeekBar mDifficulty;
	private int difficulty;
	
	private RadioGroup mUnrelatedMovieGroup;
	private RadioButton mUnrelatedMovie;
	private int unrelatedMovie;
	
	private Button mSubmit;
	private Context context;
	private int toast_duration = Toast.LENGTH_SHORT;
	private Toast toast;
	private ArrayList<String> movieSet = new ArrayList<String>();
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_create_quiz);
		context = getApplicationContext();
		mSubmit = (Button) findViewById(R.id.submit_create);
		mTitle = (TextView) findViewById(R.id.quiz_title);
		mExplanation = (TextView) findViewById(R.id.explanation);
		mMovie1 = (TextView) findViewById(R.id.movie1);
		mMovie2 = (TextView) findViewById(R.id.movie2);
		mMovie3 = (TextView) findViewById(R.id.movie3);
		mMovie4 = (TextView) findViewById(R.id.movie4);
		mDifficulty = (SeekBar) findViewById(R.id.difficulty);
		mUnrelatedMovieGroup = (RadioGroup) findViewById(R.id.unrelated_movie);
		
		mSeekBarValue = (TextView) findViewById(R.id.seekBarValue);
		mDifficulty.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
			  	@Override
			    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
			        mSeekBarValue.setText("Difficulty: " + String.valueOf(progress + 1));
			    }

			    @Override
			    public void onStartTrackingTouch(SeekBar seekBar) {

			    }

			    @Override
			    public void onStopTrackingTouch(SeekBar seekBar) {

			    }
		});
		
		mSubmit.setOnClickListener(new Button.OnClickListener(){
			@Override
			public void onClick(View v) {
				title = mTitle.getText().toString();
				explanation = mExplanation.getText().toString();
				movie1 = mMovie1.getText().toString();
				movie2 = mMovie2.getText().toString();
				movie3 = mMovie3.getText().toString();
				movie4 = mMovie4.getText().toString();
				difficulty = mDifficulty.getProgress() + 1; // min is 0;
				unrelatedMovie = mUnrelatedMovieGroup.getCheckedRadioButtonId();
	            // find the radiobutton by returned id
	                
				
				if ( title == "") {
					CharSequence text = "You need to define a title";
					toast = Toast.makeText(context, text, toast_duration);
					toast.show();
				}				
				else if (explanation == "" ) {
					CharSequence text = "You need to provide an explanation";
					toast = Toast.makeText(context, text, toast_duration);
					toast.show();
				}
				else if ( movie1 == "" || movie2 == "" || movie3 == "" || movie4 == "") {
					CharSequence text = "You need to provide a complete movie set";
					toast = Toast.makeText(context, text, toast_duration);
					toast.show();
				}
				else{
					Log.d("MUTIBO", "Valid Quiz. Sending to server");
					
					movieSet.add(movie1);
					movieSet.add(movie2);
					movieSet.add(movie3);
					movieSet.add(movie4);
					
					Quiz q = new Quiz(title, difficulty, explanation, unrelatedMovie, movieSet);
					Player p = new Player("coursera", "changeit");
					q.setAuthor(p);
					
					
					Gson gson = new Gson();
					String jsonQuiz = gson.toJson(q);
					try {
						JSONObject jsonObj = new JSONObject(jsonQuiz);
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					Log.d("MUTIBO", "CreateQuiz:: jsonQuiz " + jsonQuiz);
					startNewAsyncTask(jsonObj);
					
				}
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.create, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	private void startNewAsyncTask(JSONObject jsonQuiz) {
		PostCreatedQuizTask asyncTask = new PostCreatedQuizTask(this);
	    this.asyncTaskWeakRef = new WeakReference<PostCreatedQuizTask >(asyncTask);
	    Log.d("MUTIBO", "CreatedQuizFragment::startNewAsyncTask executing task");
	    asyncTask.execute(jsonQuiz);
	}
	
	private class PostCreatedQuizTask extends AsyncTask<String, Void, HttpResponse> {
		private WeakReference<CreateQuizActivity> fragmentWeakRef;
		
		 private PostCreatedQuizTask (CreateQuizActivity activity) {
	            this.fragmentWeakRef = new WeakReference<CreateQuizActivity>(activity);
        }
		
		@Override
		protected HttpResponse doInBackground(String... jsonQuiz) {
			// TODO Auto-generated method stub
			HttpResponse response = null;
			try{
				
				Log.d("MUTIBO", "CreateQuizActivity Quiz POST request");
				HttpClient client = new DefaultHttpClient();
				HttpConnectionParams.setConnectionTimeout(client.getParams(), TIMEOUT_MILLISEC);
				//HttpConnectionParams.setSoTimeout(httpParams, TIMEOUT_MILLISEC);
				HttpPost post = new HttpPost("http://10.0.2.2:8080/quiz");
				
				StringEntity se = new StringEntity(jsonQuiz.toString());
				se.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, "application/json"));
				post.setEntity(se);
				post.set
				response = client.execute(post);
				return response;
//				URL u;
//				u = new URL("http://10.0.2.2:8080/quiz");
//				HttpURLConnection conn = (HttpURLConnection) u.openConnection();
//	            conn.setRequestMethod("POST");
//	            conn.set
//	            conn.connect();
//	            Log.d("MUTIBO", "CreateQuizActivity::PostCreatedQuizTask Gettting Connection");
//	            InputStream is = conn.getInputStream();
//	            // Read the stream
//	            byte[] b = new byte[1024];
//	            ByteArrayOutputStream baos = new ByteArrayOutputStream();
//	            while ( is.read(b) != -1)
//	            baos.write(b);
//	            String JSONResp = new String(baos.toByteArray());
//                //result = convertQuiz(JSONResp);
//	            Log.d("MUTIBO", "CreateQuizActivity::PostCreatedQuizTask Returning result->" + JSONResp.toString());
//	            conn.disconnect();
//	        	return result;
			}
			catch (Throwable t){
				t.printStackTrace();
			}
			finally {
				Log.d("MUTIBO", "CreateQuizActivity Finally Block");
				return response;
			}

		}
		
		@Override
		protected void onPostExecute(HttpResponse response) {
			//super.onPostExecute(result);
			if (this.fragmentWeakRef.get() != null) {	
				//mArrayAdapter.setItemList(result);
				Log.d("MUTIBO", "CreateQuizActivity::onPostExecute");
				Boolean res = response.getStatusLine().getStatusCode() == 202;
				if (res){
					Log.d("MUTIBO", "Successfully created quiz");
				}
				//mArrayAdapter.notifyDataSetChanged();
			}
			Log.d("MUTIBO", "CreateQuizActivity::onPostExecute NULL results");
		}
	}
	
	private Quiz convertQuiz(JSONObject obj) throws JSONException {
		 Log.d("MUTIBO", "CreateQuizActivity::convertQuiz");
        String name = obj.getString("name");
        int rating = obj.getInt("rating");
        
        ArrayList<String> movieSet = new ArrayList<String>();
        JSONArray movieObj = obj.getJSONArray("movieSet");

        for (int i=0; i< movieObj.length(); i++){
           movieSet.add(movieObj.getString(i));
        }
        
        String justification = obj.getString("justification");
        int unrelatedMovie = obj.getInt("unrelatedMovie");

        return new Quiz(name, rating, justification, unrelatedMovie,movieSet);
    }
	
	
}
